x<-c()
n<-c()
for(i in 1:10000)
{
states<-expand.grid(rep(list(0:1), X)) # simulate data
sampA<-states[sample(1:nrow(states),N, replace=TRUE),]
sampB<-states[sample(1:nrow(states),N, replace=TRUE),]
mycomb<-data.frame(combn(1:nrow(sampA),2))
before<-as.numeric(vegdist(sampA, method="jaccard"))
after<-as.numeric(vegdist(sampB, method="jaccard"))
d.in<-length(which(before>after &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
d<-c(d, d.in)
h.in<-length(which(after>before &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
h<-c(h, h.in)
delta.in<-d.in-h.in
delta<-c(delta, delta.in)
x.in<-X
x<-c(x,x.in)
n.in<-N
n<-c(n, n.in)
}
results<-rbind(data.frame(type='d',value=d, x=x, n=n),
data.frame(type="h", value=h, x=x, n=n),
data.frame(type='delta',value=abs(delta), x=x, n=n))
data<-rbind(data, results)
}
}
data<-data[-1,]
endtime<-Sys.time()
endtime-starttime
ggplot(data[data$type=="h",])+
geom_density(aes(x=value, fill=type), col='black', alpha=0.5)+
geom_vline(xintercept=0.5)+
theme_bw(15)+
facet_grid(n~x, scale='free_y')
dim(data)
1260000/3
endtime-starttime
420000/(57.8*60)
library(vegan)
library(ggplot2)
x<-5 # 5 species
nsite<-10 # 10 sites
states<-expand.grid(rep(list(0:1), x)) # simulate data
# resample data
# 5 seconds for 1000 iterations at x=3 and n=10
starttime<-Sys.time()
data<-data.frame(type="temp",value=0, x=0,n=0)
for(X in seq(from=2, to=12, by=2)) # Species
{
for(N in seq(from=3,to=15, by=2)) # Sites
{
d<-c()
h<-c()
delta<-c()
x<-c()
n<-c()
for(i in 1:500)
{
states<-expand.grid(rep(list(0:1), X)) # simulate data
sampA<-states[sample(1:nrow(states),N, replace=TRUE),]
sampB<-states[sample(1:nrow(states),N, replace=TRUE),]
mycomb<-data.frame(combn(1:nrow(sampA),2))
before<-as.numeric(vegdist(sampA, method="jaccard"))
after<-as.numeric(vegdist(sampB, method="jaccard"))
d.in<-length(which(before>after &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
d<-c(d, d.in)
h.in<-length(which(after>before &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
h<-c(h, h.in)
delta.in<-d.in-h.in
delta<-c(delta, delta.in)
x.in<-X
x<-c(x,x.in)
n.in<-N
n<-c(n, n.in)
}
results<-rbind(data.frame(type='d',value=d, x=x, n=n),
data.frame(type="h", value=h, x=x, n=n),
data.frame(type='delta',value=abs(delta), x=x, n=n))
data<-rbind(data, results)
}
}
data<-data[-1,]
endtime<-Sys.time()
endtime-starttime
ggplot(data[data$type=="h",])+
geom_histogram(aes(x=value, fill=type), col='black', alpha=0.5)+
geom_vline(xintercept=0.5)+
theme_bw(15)+
facet_grid(n~x, scale='free_y')
searchdata<-function(n, x, hval)
{
sub1<-data[data$x==x & data$n==n & data$type=="h",]
if(hval<0.5)
{
return(nrow(sub1[!is.na(sub1$value) &
sub1$value<=hval,])/nrow(sub1[!is.na(sub1$value),]))
}
if(hval>=0.5)
{
return(nrow(sub1[!is.na(sub1$value) &
sub1$value>=hval,])/nrow(sub1[!is.na(sub1$value),]))
}
}
searchdata(n=5, x=10, hval=0.9)
searchdata(n=5, x=10, hval=0.5)
searchdata(n=5, x=10, hval=0.1)
searchdata(n=5, x=10, hval=0.49)
searchdata(n=5, x=10, hval=0.51)
searchdata(n=15, x=10, hval=0.51)
# Right now, I don't inclue matching values in the calculations
searchdata(n=15, x=10, hval=0.5)
searchdata(n=15, x=10, hval=0.75)
searchdata(n=15, x=10, hval=0.9)
starttime<-Sys.time()
data<-data.frame(type="temp",value=0, x=0,n=0)
for(X in seq(from=2, to=12, by=2)) # Species
{
for(N in seq(from=3,to=15, by=2)) # Sites
{
d<-c()
h<-c()
delta<-c()
x<-c()
n<-c()
for(i in 1:50000)
{
states<-expand.grid(rep(list(0:1), X)) # simulate data
sampA<-states[sample(1:nrow(states),N, replace=TRUE),]
sampB<-states[sample(1:nrow(states),N, replace=TRUE),]
mycomb<-data.frame(combn(1:nrow(sampA),2))
before<-as.numeric(vegdist(sampA, method="jaccard"))
after<-as.numeric(vegdist(sampB, method="jaccard"))
d.in<-length(which(before>after &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
d<-c(d, d.in)
h.in<-length(which(after>before &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
h<-c(h, h.in)
delta.in<-d.in-h.in
delta<-c(delta, delta.in)
x.in<-X
x<-c(x,x.in)
n.in<-N
n<-c(n, n.in)
}
results<-rbind(data.frame(type='d',value=d, x=x, n=n),
data.frame(type="h", value=h, x=x, n=n),
data.frame(type='delta',value=abs(delta), x=x, n=n))
data<-rbind(data, results)
}
}
library(vegan)
library(ggplot2)
starttime<-Sys.time()
data<-data.frame(type="temp",value=0, x=0,n=0)
for(X in seq(from=2, to=12, by=2)) # Species
{
for(N in seq(from=3,to=15, by=2)) # Sites
{
d<-c()
h<-c()
delta<-c()
x<-c()
n<-c()
for(i in 1:500000)
{
states<-expand.grid(rep(list(0:1), X)) # simulate data
sampA<-states[sample(1:nrow(states),N, replace=TRUE),]
sampB<-states[sample(1:nrow(states),N, replace=TRUE),]
mycomb<-data.frame(combn(1:nrow(sampA),2))
before<-as.numeric(vegdist(sampA, method="jaccard"))
after<-as.numeric(vegdist(sampB, method="jaccard"))
d.in<-length(which(before>after &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
d<-c(d, d.in)
h.in<-length(which(after>before &
!is.na(before) &
!is.na(after)))/length(after[!is.na(after) &
!is.na(before) &
!before==after])
h<-c(h, h.in)
delta.in<-d.in-h.in
delta<-c(delta, delta.in)
x.in<-X
x<-c(x,x.in)
n.in<-N
n<-c(n, n.in)
}
results<-rbind(data.frame(type='d',value=d, x=x, n=n),
data.frame(type="h", value=h, x=x, n=n),
data.frame(type='delta',value=abs(delta), x=x, n=n))
data<-rbind(data, results)
}
}
dim(data)
dim(data)[1]/3
head(data)
data<-data[-1,]
endtime<-Sys.time()
endtime-starttime
ggplot(data[data$type=="h",])+
geom_histogram(aes(x=value, fill=type), col='black', alpha=0.5)+
geom_vline(xintercept=0.5)+
theme_bw(15)+
facet_grid(n~x, scale='free_y')
4300/250
myval<-15
class(myval)
mycol<-c("red","blue")
class(mycol)
str(myval)
str(mycol)
test<-1:100
str(test)
ggplot(data[data$type=="h",])+
geom_histogram(aes(x=value, fill=type), col='black', alpha=0.5)+
geom_vline(xintercept=0.5)+
theme_bw(15)+
facet_grid(n~x, scale='free_y')
library(ggplot2)
ggplot(data[data$type=="h",])+
geom_histogram(aes(x=value, fill=type), col='black', alpha=0.5)+
geom_vline(xintercept=0.5)+
theme_bw(15)+
facet_grid(n~x, scale='free_y')
class(myval)
sqrt(sqrt(81))
8+7*7/(2_1)
8+7*7/(2+1)
8+7*7/(2+1)-19
49/3
16.3+8
16.3+8-19
setwd("C:/Users/danie/Desktop/Video Test/IMG_1618 (3-10-2016 12-26-40 AM)")
library(EBImage)
prepimage<-function(imagefile, sigmaval)
{
# Step 1: Read in image
newimage<<-readImage(imagefile)
# Step 2: Extract values
imagedata<<-newimage@.Data
return(imagedata)
}
length(list.files())
i=2
setA<-prepimage(list.files()[i])
setB<-prepimage(list.files()[i-1])
frame.in<-i
frame<-c(frame, frame.in)
test<-wilcox.test(setA, setB)$p.value
setwd("C:/Users/danie/Desktop/Video Test/IMG_1618 (3-10-2016 12-26-40 AM)")
library(EBImage)
prepimage<-function(imagefile, sigmaval)
{
# Step 1: Read in image
newimage<<-readImage(imagefile)
# Step 2: Extract values
imagedata<<-newimage@.Data
return(imagedata)
}
frame<-c()
setA<-prepimage(list.files()[i])
i=2
setA<-prepimage(list.files()[i])
setB<-prepimage(list.files()[i-1])
str(setA)
hist(setA)
hist(setB)
length(setA)
cp4<-c() # Compare row / col means
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
hist(cA)
length(cA)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
rw
cw
?list.files
list.files()
2:length(list.files(pattern=".jpg"))
setwd("C:/Users/danie/Desktop/Video Test/IMG_1618 (3-10-2016 12-26-40 AM)")
library(EBImage)
prepimage<-function(imagefile, sigmaval)
{
# Step 1: Read in image
newimage<<-readImage(imagefile)
# Step 2: Extract values
imagedata<<-newimage@.Data
return(imagedata)
}
results<-c()
for(i in 2:length(list.files(pattern=".jpg")))
{
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
if(rw|cw<0.05) {results.in<-"Y"; results<-c(results, results.in)}
if(rw & cw>=0.05) {results.in<-"N"; results<-c(results, results.in)}
}
1:(length(list.files(pattern=".jpg"))-1))
1:(length(list.files(pattern=".jpg"))-1)
data.frame(frameA=2:length(list.files(pattern=".jpg")),
frameB=1:(length(list.files(pattern=".jpg"))-1),
results)
results
rm(results)
results<-c()
for(i in 2:length(list.files(pattern=".jpg")))
{
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
print(i)
print(rw)
print(cw)
if(rw|cw<0.05) {results.in<-"Y"; results<-c(results, results.in)}
if(rw & cw>=0.05) {results.in<-"N"; results<-c(results, results.in)}
}
results
i=2
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
rw
cw
i=3
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
rw
cw
i=4
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
print(rw)
print(cw)
i=5
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
print(i)
print(rw)
print(cw)
if(rw|cw<0.05) {results.in<-"Y"; results<-c(results, results.in)}
rm(results)
results<-c()
if(rw|cw<0.05) {results.in<-"Y"; results<-c(results, results.in)}
results
if(rw & cw>=0.05) {results.in<-"N"; results<-c(results, results.in)}
results
rm(results)
results<-c()
for(i in 2:length(list.files(pattern=".jpg")))
{
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
print(i)
print(rw)
print(cw)
if(rw|cw<0.05) {results.in<-"Y"; results<-c(results, results.in)}
if(rw & cw>=0.05) {results.in<-"N"; results<-c(results, results.in)}
}
results
results<-c()
for(i in 2:length(list.files(pattern=".jpg")))
{
setA<-prepimage(list.files(pattern=".jpg")[i])
setB<-prepimage(list.files(pattern=".jpg")[i-1])
rA<-rowMeans(setA)
rB<-rowMeans(setB)
cA<-colMeans(setA)
cB<-colMeans(setB)
rw<-wilcox.test(rA, rB)$p.value
cw<-wilcox.test(cA, cB)$p.value
print(i)
print(rw)
print(cw)
if(rw|cw<0.05) {results.in<-"Y"}
if(rw & cw>=0.05) {results.in<-"N"}
results<-c(results, results.in)
}
x<-data.frame(frameA=2:length(list.files(pattern=".jpg")),
frameB=1:(length(list.files(pattern=".jpg"))-1),
results)
x
setwd("C:/Users/danie/Desktop/MUN/OSC Seminar/Image Analysis")
setwd("C:/Users/danie/Desktop/MUN/OSC Seminar/Image Analysis/Video Frames")
# ---- Russian Roulette Game ----
load_game<-function()
{
chambers<<-c(1:8)
bullet<<-sample(1:8,1)
}
trigger<-function()
{
if(length(chambers)==0) print("Reload")
if(length(chambers)>0)
{
gamble<-sample(chambers,1)
chambers<<-chambers[!chambers==gamble]
if(gamble==bullet) print("BOOM. Get back to work.")
if(!gamble==bullet) print("*click*")
}
if(length(chambers)==1) if(chambers==bullet) print("Are you sure about this...?")
}
load_game()
trigger()
trigger()
trigger()
rep(trigger(),4)
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
load_game()
trigger()
trigger()
trigger()
trigger()
trigger()
load_game()
trigger()
trigger()
trigger()
trigger()
load_game()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
load_game()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
trigger()
